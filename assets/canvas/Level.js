
// -- user code here --

/* --- start generated code --- */

// Generated by Phaser Editor 1.4.3 (Phaser v2.6.2)


/**
 * Level.
 */
function Level() {
	
	Phaser.State.call(this);
	
}

/** @type Phaser.State */
var Level_proto = Object.create(Phaser.State.prototype);
Level.prototype = Level_proto;
Level.prototype.constructor = Level;

Level.prototype.init = function () {
	
	this.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
	this.scale.pageAlignHorizontally = true;
	this.scale.pageAlignVertically = true;
	
};

Level.prototype.preload = function () {
	
	this.load.pack('level', 'assets/pack.json');
  this.load.image('gameover', 'assets/images/GameOver.png');
  this.load.image('congrats', 'assets/images/congrats.png');
};

Level.prototype.create = function () {
	
	this.beforeCreate();
	
	var _BG = this.add.tileSprite(-11, -7, 1713, 750, 'BG', null);
	_BG.scale.setTo(1.1289946683730876, 1.0275188997398834);
	_BG.fixedToCamera = true;
	
	var _back = this.add.group();
	
	var _Bush__2_ = this.add.tileSprite(103, 1459, 133, 65, 'objects', 'Bush (2)', _back);
	_Bush__2_.scale.setTo(1.2436090513997489, 1.4061541519275604);
	
	this.add.sprite(1021, 492, 'objects', 'Crate', _back);
	
	this.add.sprite(1074, 1143, 'tiles', '1', _back);
	
	this.add.tileSprite(1202, 1143, 512, 128, 'tiles', '2', _back);
	
	this.add.sprite(1714, 1143, 'tiles', '3', _back);
	
	this.add.sprite(1714, 1527, 'tiles', '16', _back);
	
	this.add.sprite(1074, 1527, 'tiles', '12', _back);
	
	this.add.tileSprite(1202, 1527, 512, 128, 'tiles', '9', _back);
	
	this.add.tileSprite(1074, 1271, 129, 256, 'tiles', '4', _back);
	
	this.add.tileSprite(1714, 1271, 128, 256, 'tiles', '6', _back);
	
	this.add.tileSprite(1202, 1271, 512, 256, 'tiles', '5', _back);
	
	this.add.sprite(-11, 1529, 'tiles', '1', _back);
	
	this.add.tileSprite(117, 1529, 512, 128, 'tiles', '2', _back);
	
	this.add.sprite(629, 1529, 'tiles', '3', _back);
	
	this.add.sprite(629, 1657, 'tiles', '16', _back);
	
	this.add.sprite(-11, 1657, 'tiles', '12', _back);
	
	this.add.tileSprite(117, 1657, 512, 128, 'tiles', '9', _back);
	
	this.add.sprite(1013, 1323, 'tiles', '1', _back);
	
	this.add.tileSprite(1141, 1323, 512, 128, 'tiles', '2', _back);
	
	this.add.sprite(1653, 1323, 'tiles', '3', _back);
	
	this.add.sprite(2037, 1657, 'tiles', '16', _back);
	
	this.add.sprite(1013, 1657, 'tiles', '12', _back);
	
	this.add.tileSprite(1141, 1657, 896, 128, 'tiles', '9', _back);
	
	this.add.tileSprite(1141, 1401, 512, 256, 'tiles', '5', _back);
	
	this.add.tileSprite(1653, 1401, 128, 128, 'tiles', '6', _back);
	
	this.add.tileSprite(1013, 1401, 129, 256, 'tiles', '4', _back);
	
	this.add.sprite(1781, 1529, 'tiles', '11', _back);
	
	this.add.sprite(1653, 1529, 'tiles', '10', _back);
	
	this.add.sprite(2037, 1529, 'tiles', '3', _back);
	
	this.add.sprite(1909, 1529, 'tiles', '2', _back);
	
	this.add.sprite(-11, 505, 'tiles', '1', _back);
	
	this.add.tileSprite(117, 505, 512, 128, 'tiles', '2', _back);
	
	var _Bush__2_1 = this.add.sprite(34, 382, 'objects', 'Bush (2)', _back);
	_Bush__2_1.scale.setTo(1.9849624160619828, 1.9384615456376617);
	
	this.add.sprite(629, 505, 'tiles', '3', _back);
	
	this.add.sprite(629, 633, 'tiles', '16', _back);
	
	this.add.sprite(-11, 633, 'tiles', '12', _back);
	
	this.add.tileSprite(117, 633, 512, 128, 'tiles', '9', _back);
	
	this.add.sprite(1397, 377, 'tiles', '15', _back);
	
	this.add.sprite(1269, 377, 'tiles', '13', _back);
	
	this.add.sprite(1013, 761, 'tiles', '13', _back);
	
	this.add.sprite(1141, 761, 'tiles', '14', _back);
	
	this.add.sprite(1269, 761, 'tiles', '15', _back);
	
	this.add.sprite(503, 1030, 'tiles', '13', _back);
	
	this.add.sprite(631, 1030, 'tiles', '14', _back);
	
	this.add.sprite(759, 1030, 'tiles', '15', _back);
	
	this.add.sprite(729, 955, 'objects', 'Crate', _back);
	
	this.add.sprite(652, 955, 'objects', 'Crate', _back);
	
	this.add.sprite(575, 955, 'objects', 'Crate', _back);
	
	this.add.sprite(652, 878, 'objects', 'Crate', _back);
	
	this.add.sprite(1855, 1457, 'objects', 'Crate', _back);
	
	this.add.sprite(-7, 446, 'objects', 'Bush (1)', _back);
	
	this.add.sprite(1642, 1110, 'objects', 'Tree_1', _back);
	
	this.add.tileSprite(-46, 1742, 2245, 201, 'tiles', '18', _back);
	
	this.add.sprite(571, 456, 'objects', 'Stone', _back);
	
	this.add.sprite(1115, 1263, 'objects', 'Bush (1)', _back);
	
	this.add.sprite(1378, 1262, 'objects', 'Bush (2)', _back);
	
	this.add.sprite(1511, 1077, 'objects', 'Crate', _back);
	
	this.add.sprite(1471, 1001, 'objects', 'Crate', _back);
	
	this.add.sprite(807, 1598, 'tiles', '13', _back);
	
	this.add.sprite(934, 1597, 'tiles', '14', _back);
	
	this.add.sprite(1061, 1597, 'tiles', '14', _back);
	
	this.add.sprite(1188, 1597, 'tiles', '14', _back);
	
	this.add.sprite(1315, 1596, 'tiles', '14', _back);
	
	this.add.sprite(1442, 1595, 'tiles', '14', _back);
	
	this.add.sprite(1569, 1595, 'tiles', '15', _back);
	
	this.add.sprite(1976, 1292, 'tiles', '13', _back);
	
	this.add.sprite(2257, 1497, 'tiles', '14', _back);
	
	this.add.sprite(2103, 1292, 'tiles', '15', _back);
	
	this.add.sprite(1931, 1457, 'objects', 'Crate', _back);
	
	var _player = this.add.tileSprite(201, 1331, 126, 198, 'player', 0);
	_player.pivot.setTo(1.9391937255859375, 0.0816650390625);
	_player.anchor.setTo(0.5, 0.0);
	var _player_walk = _player.animations.add('walk', [7, 8, 9, 10, 11, 12, 13, 14, 15], 6, true);
	_player.animations.add('jump', [2, 3, 4, 5, 6, 7], 6, true);
	_player.animations.add('idle', [0], 4, true);
	this.game.physics.arcade.enable(_player);
	_player.body.setSize(67.91329956054688, 90.52034759521484, 24.572677612304688, 108.1305923461914);
	
	var _downline = this.add.sprite(884, 629, 'downline', 0);
	_downline.scale.setTo(0.66, 0.66);
	_downline.animations.add('walk', [6, 1, 4, 9, 1], 6, true);
	this.game.physics.arcade.enable(_downline);
	_downline.body.setSize(132.88282465934753, 126.9884102344513, 14.029208421707153, 14.647881269454956);
	_downline.body.mass = 0.02;
	_downline.body.bounce.x = 1.0;
	_downline.body.bounce.y = 1.0;
	_downline.body.velocity.x = 25.0;
	_downline.body.velocity.y = 25.0;
	_downline.body.acceleration.x = 5.0;
	_downline.body.acceleration.y = 2.0;
	_downline.body.gravity.x = 0.1;
	_downline.body.gravity.y = 0.1;
	_downline.body.angularVelocity = 1.0;
	
	var _water = this.add.tileSprite(-51, 1644, 2241, 99, 'tiles', '17');
	
	var _fruits = this.add.physicsGroup(Phaser.Physics.ARCADE);
	_fruits.position.setTo(-11, -7);
	
	this.add.sprite(639, 444, 'objects', 'fruit', _fruits);
	
	this.add.sprite(564, 444, 'objects', 'fruit', _fruits);
	
	this.add.sprite(489, 444, 'objects', 'fruit', _fruits);
	
	this.add.sprite(414, 444, 'objects', 'fruit', _fruits);
	
	this.add.sprite(339, 444, 'objects', 'fruit', _fruits);
	
	this.add.sprite(264, 444, 'objects', 'fruit', _fruits);
	
	this.add.sprite(189, 444, 'objects', 'fruit', _fruits);
	
	this.add.sprite(114, 444, 'objects', 'fruit', _fruits);
	
	var _front = this.add.group();
	_front.position.setTo(-11, -7);
	
	this.add.sprite(371, 465, 'objects', 'Bush (2)', _front);
	
	this.add.sprite(178, 464, 'objects', 'Bush (1)', _front);
	
	this.add.sprite(586, 997, 'objects', 'Stone', _front);
	
	this.add.sprite(783, 1007, 'objects', 'Bush (3)', _front);
	
	this.add.sprite(2051, 1497, 'objects', 'Stone', _front);
	
	this.add.sprite(2063, 1442, 'objects', 'Sign_1', _front);
	
	this.add.sprite(1206, 717, 'objects', 'Bush (1)', _front);
	
	this.add.sprite(1293, 351, 'objects', 'Bush (3)', _front);
	
	this.add.sprite(36, 1490, 'objects', 'Bush (1)', _front);
	
	this.add.sprite(292, 1506, 'objects', 'Tree_1', _front);
	
	this.add.sprite(594, 1486, 'objects', 'Sign_2', _front);
	
	var _collisionLayer = this.add.physicsGroup(Phaser.Physics.ARCADE);
	_collisionLayer.position.setTo(-11, -7);
	
	this.add.tileSprite(3, 1543, 760, 38, 'tiles', 'physics', _collisionLayer);
	
	this.add.tileSprite(1028, 1349, 760, 38, 'tiles', 'physics', _collisionLayer);
	
	this.add.tileSprite(516, 1047, 382, 17, 'tiles', 'physics', _collisionLayer);
	
	this.add.tileSprite(4, 522, 760, 38, 'tiles', 'physics', _collisionLayer);
	
	this.add.tileSprite(1027, 775, 378, 26, 'tiles', 'physics', _collisionLayer);
	
	this.add.tileSprite(1285, 391, 248, 38, 'tiles', 'physics', _collisionLayer);
	
	this.add.tileSprite(1085, 1160, 766, 38, 'tiles', 'physics', _collisionLayer);
	
	this.add.tileSprite(1793, 1546, 378, 38, 'tiles', 'physics', _collisionLayer);
	
	this.add.tileSprite(587, 963, 229, 15, 'tiles', 'physics', _collisionLayer);
	
	this.add.tileSprite(664, 886, 74, 15, 'tiles', 'physics', _collisionLayer);
	
	this.add.tileSprite(1524, 1087, 73, 25, 'tiles', 'physics', _collisionLayer);
	
	this.add.tileSprite(1484, 1010, 73, 25, 'tiles', 'physics', _collisionLayer);
	
	var _physics3 = this.add.tileSprite(1868, 1469, 73, 25, 'tiles', 'physics', _collisionLayer);
	_physics3.scale.setTo(2.038874439941794, 1.0);
	
	this.add.tileSprite(1033, 502, 74, 15, 'tiles', 'physics', _collisionLayer);
	
	this.add.tileSprite(-12, 1740, 2201, 25, 'tiles', 'physics', _collisionLayer);
	
	this.add.tileSprite(882, 1614, 760, 38, 'tiles', 'physics', _collisionLayer);
	
	var _physics16 = this.add.tileSprite(1987, 1314, 73, 25, 'tiles', 'physics', _collisionLayer);
	_physics16.scale.setTo(3.424018193616464, 1.0);
	
	var _products = this.add.physicsGroup(Phaser.Physics.ARCADE);
	
	var _products_2 = this.add.sprite(662, 382, 'products', 'products_01', _products);
	_products_2.scale.setTo(0.5, 0.5);
	_products_2.data = {
		"type":"lumi"
		};
	
	var _products_1 = this.add.sprite(1223, 1023, 'products', 'products_01', _products);
	_products_1.scale.setTo(0.5, 0.5);
	_products_1.data = {
		"type":"lumi"
		};
	
	var _products_4 = this.add.sprite(1022, 367, 'products', 'products_02', _products);
	_products_4.scale.setTo(0.5, 0.5);
	_products_4.data = {
		"type":"toothpaste"
		};
	
	var _products_5 = this.add.sprite(1018, 647, 'products', 'products_03', _products);
	_products_5.scale.setTo(0.5, 0.5);
	_products_5.data = {
		"type":"vitamins"
		};
	
	var _products_ = this.add.sprite(690, 1461, 'products', 'products_01', _products);
	_products_.scale.setTo(0.5, 0.5);
	_products_.pivot.setTo(48.384033203125, 120.9599609375);
	_products_.data = {
		"type":"lumi"
		};
	
	var _products_7 = this.add.sprite(1173, 1488, 'products', 'products_02', _products);
	_products_7.scale.setTo(0.5, 0.5);
	_products_7.pivot.setTo(44.927978515625, 114.048095703125);
	_products_7.data = {
		"type":"toothpaste"
		};
	
	var _products_21 = this.add.sprite(1285, 258, 'products', 'products_02', _products);
	_products_21.scale.setTo(0.5, 0.5);
	_products_21.data = {
		"type":"toothpaste"
		};
	
	var _products_22 = this.add.sprite(1348, 260, 'products', 'products_02', _products);
	_products_22.scale.setTo(0.5, 0.5);
	_products_22.data = {
		"type":"toothpaste"
		};
	
	var _products_23 = this.add.sprite(1112, 639, 'products', 'products_02', _products);
	_products_23.scale.setTo(0.5, 0.5);
	_products_23.data = {
		"type":"toothpaste"
		};
	
	var _products_24 = this.add.sprite(1169, 642, 'products', 'products_02', _products);
	_products_24.scale.setTo(0.5, 0.5);
	_products_24.data = {
		"type":"toothpaste"
		};
	
	var _products_25 = this.add.sprite(1113, 1030, 'products', 'products_03', _products);
	_products_25.scale.setTo(0.5, 0.5);
	_products_25.data = {
		"type":"vitamins"
		};
	
	var _products_8 = this.add.sprite(1237, 1488, 'products', 'products_02', _products);
	_products_8.scale.setTo(0.5, 0.5);
	_products_8.pivot.setTo(44.927978515625, 114.048095703125);
	_products_8.data = {
		"type":"toothpaste"
		};
	
	var _products_9 = this.add.sprite(1306, 1488, 'products', 'products_02', _products);
	_products_9.scale.setTo(0.5, 0.5);
	_products_9.pivot.setTo(44.927978515625, 114.048095703125);
	_products_9.data = {
		"type":"toothpaste"
		};
	
	var _products_10 = this.add.sprite(1380, 1487, 'products', 'products_02', _products);
	_products_10.scale.setTo(0.5, 0.5);
	_products_10.pivot.setTo(44.927978515625, 114.048095703125);
	_products_10.data = {
		"type":"toothpaste"
		};
	
	var _products_11 = this.add.sprite(1456, 1485, 'products', 'products_02', _products);
	_products_11.scale.setTo(0.5, 0.5);
	_products_11.pivot.setTo(44.927978515625, 114.048095703125);
	_products_11.data = {
		"type":"toothpaste"
		};
	
	var _products_12 = this.add.sprite(1530, 1486, 'products', 'products_02', _products);
	_products_12.scale.setTo(0.5, 0.5);
	_products_12.pivot.setTo(44.927978515625, 114.048095703125);
	_products_12.data = {
		"type":"toothpaste"
		};
	
	var _products_13 = this.add.sprite(1604, 1485, 'products', 'products_02', _products);
	_products_13.scale.setTo(0.5, 0.5);
	_products_13.pivot.setTo(44.927978515625, 114.048095703125);
	_products_13.data = {
		"type":"toothpaste"
		};
	
	var _products_3 = this.add.sprite(1901, 1385, 'products', 'products_02', _products);
	_products_3.scale.setTo(0.5, 0.5);
	_products_3.pivot.setTo(44.927978515625, 114.048095703125);
	_products_3.data = {
		"type":"toothpaste"
		};
	
	var _products_6 = this.add.sprite(1978, 1381, 'products', 'products_02', _products);
	_products_6.angle = -17.44260402724665;
	_products_6.scale.setTo(0.5, 0.5);
	_products_6.pivot.setTo(44.927978515625, 114.048095703125);
	_products_6.data = {
	"type":"toothpaste"
	};
	
	var _products_14 = this.add.sprite(2048, 1337, 'products', 'products_02', _products);
	_products_14.angle = -40.83167699771728;
	_products_14.scale.setTo(0.5, 0.5);
	_products_14.pivot.setTo(44.927978515625, 114.048095703125);
	_products_14.data = {
	"type":"toothpaste"
	};
	
	var _products_15 = this.add.sprite(2074, 1233, 'products', 'products_02', _products);
	_products_15.angle = -94.30413637247831;
	_products_15.scale.setTo(0.5, 0.5);
	_products_15.pivot.setTo(44.927978515625, 114.048095703125);
	_products_15.data = {
	"type":"toothpaste"
	};
	
	var _products_16 = this.add.sprite(2048, 1150, 'products', 'products_02', _products);
	_products_16.angle = -112.16512484958407;
	_products_16.scale.setTo(0.5, 0.5);
	_products_16.pivot.setTo(44.927978515625, 114.048095703125);
	_products_16.data = {
	"type":"toothpaste"
	};
	
	var _products_17 = this.add.sprite(1969, 1076, 'products', 'products_02', _products);
	_products_17.angle = -147.95327753828477;
	_products_17.scale.setTo(0.5, 0.5);
	_products_17.pivot.setTo(44.927978515625, 114.048095703125);
	_products_17.data = {
	"type":"toothpaste"
	};
	
	var _products_18 = this.add.sprite(385, 1285, 'products', 'products_02', _products);
	_products_18.scale.setTo(0.5, 0.5);
	_products_18.pivot.setTo(44.927978515625, 114.048095703125);
	_products_18.data = {
		"type":"toothpaste"
		};
	
	var _products_19 = this.add.sprite(456, 1284, 'products', 'products_02', _products);
	_products_19.scale.setTo(0.5, 0.5);
	_products_19.pivot.setTo(44.927978515625, 114.048095703125);
	_products_19.data = {
		"type":"toothpaste"
		};
	
	var _products_20 = this.add.sprite(534, 1283, 'products', 'products_02', _products);
	_products_20.scale.setTo(0.5, 0.5);
	_products_20.pivot.setTo(44.927978515625, 114.048095703125);
	_products_20.data = {
		"type":"toothpaste"
		};
	
	_fruits.setAll("body.allowGravity", false);
	_collisionLayer.setAll("body.immovable", true);
	_collisionLayer.setAll("body.allowGravity", false);
	_collisionLayer.setAll("renderable", false);
	_collisionLayer.setAll("body.checkCollision.down", false);
	_products.setAll("body.allowGravity", false);

  congrats = this.add.button(0,0, "congrats", this.nextLevel,this);
  congrats.fixedToCamera = true;
  congrats.cameraOffset.setTo(300,150);
  congrats.visible = false;

  gameover = this.add.button(0,0, "gameover", this.gameOver, this);
  gameover.fixedToCamera = true;
  gameover.cameraOffset.setTo(300,150);
  gameover.visible = false;
	// public fields
	
	this.fBG = _BG;
	this.fPlayer = _player;
	this.fPlayer_walk = _player_walk;
	this.fDownline = _downline;
	this.fWater = _water;
	this.fFruits = _fruits;
	this.fCollisionLayer = _collisionLayer;
	this.fProducts = _products;
	this.afterCreate();
	
};

/* --- end generated code --- */
var groupSalesVolume = 0, personalSalesVolume = 0, percentDone, progress, numberDistributors = 0, congrats, distributorCount = 0,
		gsvAmount, angle = {min: 0, max: 0}, radialProgressBar, color1=0xff0000, color2=0x80ff00;

Level.prototype.beforeCreate = function() {
	
    // world
	
    this.world.resize(2200, 1800);

    // start the Arcade system
    this.game.physics.startSystem(Phaser.Physics.ARCADE);

    // set the global gravity
    this.game.physics.arcade.gravity.y = 700;

    // create the cursors
    this.cursors = this.input.keyboard.createCursorKeys();

    this.game.load.spritesheet('timer', 'assets/img/timer.png', 150, 20);


    this.psvAmount = 0;
    this.gsvAmount = 0;
    progress = this.add.image(0, 0, "bar");
    progress.height = 10;
    progress.width = 0;
    progress.initialWidth = 300;
    progress.fixedToCamera = true;
    progress.cameraOffset.setTo(0,this.game.height-10);

    congrats = this.add.button(0,0, "congrats", this.nextLevel,this);
    congrats.fixedToCamera = true;
    congrats.cameraOffset.setTo(300,150);
    congrats.visible = false;

    gsvText = this.game.add.text(300, 0, 'Group Sales Volume: 0', {fontSize: '16px', fill: '#000'});
    gsvText.fixedToCamera = true;
    gsvText.cameraOffset.setTo(0,0);

    psvText = this.game.add.text(0, 0, 'Personal Sales Volume: 0', {fontSize: '16px', fill: '#000'});
    psvText.fixedToCamera = true;
    psvText.cameraOffset.setTo(300,0);

    this.score = 0;
    this.scoreBuffer = 0;

    //Create the score label



};


Level.prototype.afterCreate = function () {
    this.createScore();
    this.createBadges();
    this.camera.follow(this.fPlayer);

    var indicator = new VisualTimer({
        game: this.game,
        x: this.game.world.centerX/2,
        y: (this.game.world.centerY/2) + 120,
        seconds: 45,
        onComplete: function() {
          gameover.visible = true;
				}
    });
    indicator.start();

};

Level.prototype.update = function() {
  this.physics.arcade.collide(this.fPlayer, this.fCollisionLayer);
  this.physics.arcade.collide(this.fDownline, this.fCollisionLayer);

  if (this.cursors.left.isDown) {
    // move to the left
    this.fPlayer.body.velocity.x = -200;
  } else if (this.cursors.right.isDown) {
    // move to the right
    this.fPlayer.body.velocity.x = 200;
  } else {
    // dont move in the horizontal
    this.fPlayer.body.velocity.x = 0;
  }

  // a flag to know if the player is (down) touching the platforms
  var touching = this.fPlayer.body.touching.down;

  if (touching && this.cursors.up.isDown) {
    // jump if the player is on top of a platform and the up key is pressed
    this.fPlayer.body.velocity.y = -600;
  }

  if (touching) {
    if (this.fPlayer.body.velocity.x == 0) {
      // if it is not moving horizontally play the idle
      this.fPlayer.play("idle");
    } else {
      // if it is moving play the walk
      this.fPlayer.play("walk");
    }
  } else {
    // it is not touching the platforms so it means it is jumping.
    this.fPlayer.play("jump");
  }

  // update the facing of the player
  if (this.cursors.left.isDown) {
    // face left
    this.fPlayer.scale.x = -1;
  } else if (this.cursors.right.isDown) {
    // face right
    this.fPlayer.scale.x = 1;
  }

  // fruits
  this.physics.arcade.overlap(this.fPlayer, this.fFruits, this.playerVsFruit, null, this);
  this.physics.arcade.overlap(this.fPlayer, this.fProducts, this.playerVsProduct, null, this);

  // downline
  this.physics.arcade.overlap(this.fPlayer, this.fDownline, this.playerVsDownline, null, this);
  // water
  this.fWater.tilePosition.x -= 1;
  this.fBG.tilePosition.x = -this.camera.x;

  // progress bar
  progress.width += .1;
  numberDistributors = 1;

  if (this.gsvAmount >= 100 && distributorCount >= 1) {
    congrats.visible = true;
  }

  //While there is score in the score buffer, add it to the actual score
  if (this.scoreBuffer > 0) {
    this.incrementScore("psv", this.scoreBuffer);
    this.scoreBuffer = 0;
  }
  if (this.dist_player.visible)
	{
    radialProgressBar.clear();
    radialProgressBar.lineStyle(8, 0xff0000, 1);
    radialProgressBar.lineColor = Phaser.Color.interpolateColor(color1, color2, 360, angle.max, 1);
    radialProgressBar.arc(0,0,26, angle.min, this.game.math.degToRad(angle.max), false);
    radialProgressBar.endFill();
	}
};

Level.prototype.createBadges = function(){
    this.main_player = this.game.add.sprite(10, 10, "main-marker", 1);
    this.main_player.fixedToCamera = true;
    this.dist_player = this.game.add.sprite(1140, 10, "dist-marker", 1);
    this.dist_player.scale.setTo(0.5, 0.5);
    this.dist_player.fixedToCamera = true;
    this.dist_player.visible = false;

  this.dist_player2 = this.game.add.sprite(30, 100, "dist-marker", 1);
  this.dist_player2.scale.setTo(0.5, 0.5);
  this.dist_player2.fixedToCamera = true;
  this.dist_player2.visible = false;

}

Level.prototype.createScoreAnimation = function (x, y, message, score){


    var scoreFont = "24px Arial";

    //Create a new label for the score
    var scoreAnimation = this.game.add.text(x, y, message, {font: scoreFont, fill: "#39d179", stroke: "#ffffff", strokeThickness: 3});
    scoreAnimation.anchor.setTo(0.5, 0);
    scoreAnimation.align = 'center';

    //Tween this score label to the total score label
    var scoreTween = this.game.add.tween(scoreAnimation).to({x:this.game.world.centerX, y: 50}, 800, Phaser.Easing.Exponential.In, true);

    //When the animation finishes, destroy this score label, trigger the total score labels animation and add the score
    scoreTween.onComplete.add(function(){
        scoreAnimation.destroy();
        this.gsvLabelTween.start();
        this.psvLabelTween.start();
        this.scoreBuffer += score;
    }, this);
};

Level.prototype.incrementScore = function(type, amount){

	this.gsvAmount += amount;
	if(type === "psv"){
        this.psvAmount += amount;
        this.psvLabel.text = "Personal Sales Volume: " + this.psvAmount;
	}else{
        this.gsvAmount += amount;
        this.gsvLabel.text = "Group Sales Volume: " + this.gsvAmount;
	}
}

Level.prototype.playerVsDownline = function(player, customer) {
    customer.body.enable = false;
    distributorCount++;
    this.createScoreAnimation(customer.x, customer.y, '+'+10, 10);
    console.log("got vs customer");

    this.add.tween(customer).to({
        y : 10,
		x: 1140
    }, 3000, "Expo.easeOut", true);

    this.add.tween(customer.scale).to({
        x : 2,
        y : 2
    }, 1000, "Linear", true);

    this.add.tween(customer).to({
        alpha : 0.2
    }, 1000, "Linear", true).onComplete.add(customer.kill, customer);

    this.dist_player.visible = true;

  radialProgressBar = this.game.add.graphics(this.game.world.centerX, this.game.world.centerY);
  radialProgressBar.lineStyle(8, 0xff0000, 1);
  radialProgressBar.fixedToCamera = true;
  radialProgressBar.cameraOffset.setTo(1165,35);

  angle = {min: 0, max: 0}
  tween = this.game.add.tween(angle).to( {max:360}, 5000, "Linear", true, 0, 0, false);
  tween.onComplete.add(function() {
    this.dist_player.visible = false;
    this.dist_player2.visible = true;
    radialProgressBar.kill();
  }, this);

};

/**
 * @param {Phaser.Sprite}
 *            player
 * @param {Phaser.Sprite}
 *            fruit
 */
Level.prototype.playerVsFruit = function(player, fruit) {
    fruit.body.enable = false;
    this.createScoreAnimation(fruit.x, fruit.y, '+'+10, 10);
    console.log("got vs fruit");

    this.add.tween(fruit).to({
        y : fruit.y - 50
    }, 1000, "Expo.easeOut", true);

    this.add.tween(fruit.scale).to({
        x : 2,
        y : 2
    }, 1000, "Linear", true);

    this.add.tween(fruit).to({
        alpha : 0.2
    }, 1000, "Linear", true).onComplete.add(fruit.kill, fruit);

};

Level.prototype.playerVsProduct = function(player, product) {
    product.body.enable = false;

    var points;
    if(product.data.type == "lumi"){
    	points = this.game.global.productLumi;
	}
    if(product.data.type == "toothpaste"){
        points = this.game.global.productToothpaste;
    }
    if(product.data.type == "vitamins"){
        points = this.game.global.productVitamins;
    }

    this.createScoreAnimation(product.x, product.y, '+'+points, points);

    this.add.tween(product).to({
        y : product.y + 50
    }, 1000, "Expo.easeOut", true);

    this.add.tween(product.scale).to({
        x : 0.5,
        y : 0.5
    }, 1000, "Linear", true);

    this.add.tween(product).to({
        angle: 180
    }, 1000, "Linear", true);


    this.add.tween(product).to({
        alpha : 0.2
    }, 500, "Linear", true).onComplete.add(product.kill, product);

};

Level.prototype.nextLevel = function()
{

}

function collectFruit(player, fruit)
{
    //fruit.kill();
    this.createScoreAnimation(fruit.x, fruit.y, '+'+10, 10);

    this.incrementScore("gsv",10);
}

Level.prototype.createScore = function(){

    var scoreFont = "22px Arial";

    //Create the score label
    this.psvLabel = this.game.add.text(this.game.world.centerX - 200, 10, "Personal Sales Volume: 0", {font: scoreFont, fill: "#ffffff", stroke: "#535353", strokeThickness: 5});
    this.psvLabel.anchor.setTo(0.5, 0);
    this.psvLabel.align = 'center';
    this.psvLabel.fixedToCamera = true;
    this.psvLabel.visible = true;

    //Create a tween to grow / shrink the score label
    this.psvLabelTween = this.add.tween(this.psvLabel.scale).to({ x: 1.5, y: 1.5}, 200, Phaser.Easing.Linear.In).to({ x: 1, y: 1}, 200, Phaser.Easing.Linear.In);


    //Create the score label
    this.gsvLabel = this.game.add.text(this.game.world.centerX - 200, 50, "Group Sales Volume: 0", {font: scoreFont, fill: "#ffffff", stroke: "#535353", strokeThickness: 5});
    this.gsvLabel.anchor.setTo(0.5, 0);
    this.gsvLabel.align = 'center';
    this.gsvLabel.fixedToCamera = true;
    this.gsvLabel.visible = true;

    //Create a tween to grow / shrink the score label
    this.gsvLabelTween = this.add.tween(this.psvLabel.scale).to({ x: 1.5, y: 1.5}, 200, Phaser.Easing.Linear.In).to({ x: 1, y: 1}, 200, Phaser.Easing.Linear.In);

};

Level.prototype.gameOver = function()
{
  this.game.state.start("Level");
}
Level.prototype.nextLevel = function()
{
  congrats.visible = false;
  this.game.state.start("QualifyingRules");
};